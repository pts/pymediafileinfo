Media examples
^^^^^^^^^^^^^^
by pts@fazekas.hu at Fri Oct 18 01:05:59 CEST 2019

This file contains hexdumps and annotated hexdumps of various media file
elements. Some elements are truncated.

* example mpeg-ts pat #1:
  00: pointer_field=0
  00: table_id=0(pat)
  b00d: section_syntax=1(pat) private=0(pat) reserved=3 section_size_unused=0 section_size=13 section:
    0001: transport_stream_identifier=1
    c3: reserved=3 version=1 current=1
    00: section_number=0
    00: last_section_number=0
    : table_data:
      0001: program_num=1
      e100: reserved=7 pmt_pid=0x100
    76578e5f: crc32
  ff+: stuffing bytes
* example mpeg-ts pat #1:
  00: pointer_field=0
  00: table_id=0
  b00d: section_syntax=1(pat) private=0(pat) reserved=3 section_size_unused=0 section_size=13 section:
    0001: transport_stream_identifier=1
    c1: reserved=3 version=0 current=1
    00: section_number=0
    00: last_section_number=0
    : table_data:
      0001: program_num=1
      f000: reserved=7 pmt_pid=0x1000
    2ab104b2: crc32
  ff+: stuffing bytes
* example mpeg-ts pmt for example pat #1:
  00: pointer_field=0
  02: table_id=2(pmt)
  b023: section_syntax=1(pmt) private=0(pmt) reserved=3 section_size_unused=0 section_size=35 section:
    0001: program_num=1
    c1: reserved=3 version=0 current=1
    00: section_number=0
    00: last_section_number=0
    : table_data:
      f011: reserved=7 pcr_pid=0x1011
      f000: reserved=15 program_info_size=0
      : program_info (!! What are program descriptors used for?)
      : stream_info
        1b: stream_type=0x1b(h264)
        f011: reserved=7 pes_pid=0x1011
        f000: reserved=15 es_info_size_unused=0 es_info_size=0
        : es_info
      : stream_info:
        81: stream_type=0x81(ac3)
        f100: reserved=7 pes_pid=0x1100
        f00c: reserved=15 es_info_size_unused=0 es_info_size=12
        0a04656e6700050441432d33: es_info (!! What is it used for?)
    4a1fa123: crc32
  ff+: stuffing bytes
* example mpeg-ts pmt for example pat #2:
  00: pointer_field=0
  02: table_id=2(pmt)
  b017: section_syntax=1(pmt) private=0(pmt) reserved=3 section_size_unused=0 section_size=23 section:
    0001: program_num=1
    c1: reserved=3 version=0 current=1
    00: section_number=0
    00: last_section_number=0
    : table_data:
      e100: reserved=7
      f000: reserved=15 program_info_size=0
      : program_info
        1b: stream_type=0x1b(h264)
        e100: reserved=7 pes_pid=0x100
        f000: reserved=15 es_info_size_unused=0 es_info_size=0
        : es_info
      : program_info
        03: stream_type=0x03(format=mpeg-adts asubformat=mpeg-1 audio)
        e101: reserved=7 pes_pid=0x101
        f000: reserved=15 es_info_size_unused=0 es_info_size=0
        : es_info
    4e593d1e: crc32
  ff+: stuffing bytes
* example mpeg-ts pes header
  000001
  e0: sid
  0000: size
  808005:
  2100018ca1:
* example vcodec=mpeg-1 es packet: 000001b316012013ffffe018000001b80008004000000100000ffff80000010113f9a009c0130036219083431201a06210924a430690834056821909280d400ad09426b03000a00190190c0d0036425218180610848690d284a007a84868c4868237e25090d01edce4a02064c3014808006577003f00d407642480a123005764422120350137d200d0100a8013003e00b1002600c100
* example vcodec=mpeg-2 es packet: 000001b316012013ffffe018000001b5148a00010000000001b80008004000000100000ffff8000001b58ffff341800000010113f9a009c0130036219083431201a06210924a430690834056821909280d400ad09426b03000a00190190c0d0036425218180610848690d284a007a84868c4868237fe25090d01edce4a02064c30148008006577003f00d407642480a1230057644221
* example vcodec=mpeg-4 es packet: 000001b001000001b58913000001000000012000c48d8800cd0b04241443000001b24c61766335382e33352e313030000001b3001007000001b610604d82d0bc148080caa658d1098cf6877f545a5cac15fe1f977fc9fc0c52d36d05ea78192028072c320c1f66fd8541f7bdf565fff7fc0a9f7d5967d383c37fe2db4d9783e37fee4ac2a0b2b80f2500383e6400e3c238f4bd8d0566
    000001b0: visual_object_sequence_start (optional)
      01: data
    000001b5: visual_object_start
      8913: data
    00000100: video_object_start
    00000120: video_object_layer_start
      00c48d8800cd0b04241443: contains width: video_object_layer_width (13 bits) and height: video_object_layer_width (13 bits)
    000001b2: user_data_start
      4c61766335382e33352e313030000001b3001007000001b610604d82d0bc...: data
* example vcodec=mpeg-4 es packet: 000001b0f3000001b509000001010000012002044007a85820f0a21f000001b61062188a092df8151d7f18556c5deffe647da304cf6e9e856fa34ff98b8c0fb7e5c5dedd7e6fbf7d1d13f38dcf4fda4876eee0abd73ef60a7d8fee531dfd31a350fd1f9356f6a7dcff36dbfcdb6ff36dbfd1b9bdbfcdb6ffc91746d52b81e4c5317ed881e41267018dec6968524616d375564ffb096c99bdfa85e768d4c7e166e0bd67aff7764ef6714a0c0dec8842b30ddc672c6b545b06d5087b223e8a13fed2349ac5036060cd182382f2fe311ef036f9e744c3765bfcc5a1959f7cdb6ff7738b5b17185ae698162d0601ca418071ffc4811289dfc77fd77560bcaee5271b74edcfd3f7cdbfff3edbfcdfeef9ffdf73ffffc7e9dfcf4a2358c3ae7dbfbfba9d7d69ed57dcf36edc9cb6ddbb2539fdb2ec16aa57714606fd40f418b4544327cb94ef2f1751d0b3ee4180b28952c45c50dae08dcb3827db977d0ad0caa6706859b60b572c6aea2eee7560952ccccc2cc9cc255c299dfdb3d9dbc98e30cffecc1c26c8be15ea92ac9437c42287f6a372e6a2791939248b059db2cacbb7dc5cb7ebdfc8bf031139de3c405f2a81bcf55fb79da260c327481feb4739c7cc8f6fb8400b168300e521241d95b148300e52124f3d134b33af3ff374ff71fa7536916abf3df95bba7db9f6dc99b6df73f4dcfbfa5e538e
    000001b0: visual_object_sequence_start
      f3: data
    000001b5: visual_object_start
      09: data
    00000101: video_object_start
    00000120: video_object_layer_start (width and height are in here)
      02044007a85820f0a21f
    000001b6: vop_start
      1062188a092df8151d7f18556c5deffe647da304cf6e9e856fa34ff98b8c...: data
* example vcodec=mjpeg es packet: ffd8ffe000104a46494600010200000100010000fffe00104c61766335382e35342e31303000ffdb0043000804040404040505050505050606060606060606060606060607070708080807070706060707080808080909090808080809090a0a0a0c0c0b0b0e0e0e111114ffc400b70000010501010000000000000000000000030504000201060701000203010101000000000000000000000201050304000607100001020404040306050203040903050102031222050400135232426272f0069214822307c2b2a21543e2f233d2246353731683082534261154171835944401d5a5a3845164369174110001030203050408050305010100000002120003042232054252627206130792f082a214152317b2c2d2e2433316115393f273019183514494ffc00011080120016003012200021100031100ffda000c03010002110311003f00f2aa4ee09e215092a35ea910e9155aba5ca482e2491729090d954eea9f612a979f311515c52214901212e12149c29ff684852e1b4b1289d7677517c572196d1524c3ef455c2e99e738cad6
* example vcodec=h264 es packet: 00000109100000000001274d40289a6280f0088fbc07d404040500000303e90000ea60e8c0004c4b0002faf2ef380a00fe3c800000000106000780afc800000300400601510104004008148000000001218882220511161dffce9476e99daf8a53f6aaff59c484622613c2528d9e92c995737ce45d3d500db3e82dfff2ec1f0f6f362ba597fff77cf27fcdedf525fc9cead6ab045328af7f759ba8ee1c65c929ff791c45355e9f6a07cbfe6d155aab2ba1eaaf8a2c4fd6661925a4d23d500abd07a82a6e657a6367712bdb3cfe7c6b40248212e05ead9b27e4dc8c408ce59261282f3c14611bc2f602b113b783fbed62025a7487f0d9ac387883f4633e5d932eeda797f1501ea69ab85fa419ddcf65cb1e3cd7d7063e75fe37ba0cbca22941137d20cb6f664e8ffa8f04570951377e3acfdbdf998c4167783efcecfbc3f0323934af8deb56bbd905643bac364e0fc8f792fc0873d171
   000001: NAL unit
     09: NAL unit type 9: access_unit_delimiter
     100000
   000001: NAL unit
     27: NAL unit type 7: sequence_parameter_set
     4d40289a6280f0088fbc07d404040500000303e90000ea60e8c0004c4b0002faf2ef380a00
   000001: NAL unit
     28: NAL unit type 8: picture_parameter_set
     fe3c80...: data
* example vcodec=h264 es packet: 0000000109f0000000016764000dacd9416096c044000003000400000300c83c50a6580000000168ebe3cb22c00000010605ffffaadc45e9bde6d948b7962cd820d923eeef78323634202d20636f7265203135352072323931372030613834643938202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303138202d20687474
    0000000109: access unit delimiter
      f0: primary_pic_type=7 (3 bits, 8 options), then rbsp_trailing_bits (0b10000)
    0000000167: sequence parameter set, contains formula to compute width and heigh
      64000dacd9416096c044000003000400000300c83c50a658
    0000000168: picture parameter set
      ebe3cb22c0
    00000106: additional information (SEI)
      05ffff...: data
* example vcodec=h265 es packet: 000000014601500000000140010c01ffff01600000030090000003000003003c9598090000000142010101600000030090000003000003003ca00b08048596566924caf010100000030010000003019080000000014401c172b462400000014e0105ffffffffffffffa02ca2de09b51747dbbb55a4fe7fc2fc4e7832363520286275696c642031363529202d20322e393a5b4c696e75
    000000014601: nal_unit_type=35 nuh_layer_id=0 nuh_temporal_id_plus1=1 access unit delimiter (>= 32, non-VCL)
      50: pic_type=2 (3 bits, can be 0, 1 or 2)
    000000014001: nal_unit_type=32 nuh_layer_id=0 nuh_temporal_id_plus1=1 video parameter set
      0c01ffff01600000030090000003000003003c959809
    000000014201: nal_unit_type=33 nuh_layer_id=0 nuh_temporal_id_plus1=1 sequence parameter set (contains width and height)
      0101600000030090000003000003003ca00b08048596566924caf010100000030010000003019080
    000000014401: nal_unit_type=34 nuh_layer_id=0 nuh_temporal_id_plus1=1 picture parameter set
      c172b46240
    0000014e01: nal_unit_type=39 supplemental enhancement information (SEI)
      05ffff...: data
* example format=mif1
  #assert 0, parse_h265_sps('01016000000300000300000300000300baa002d0803c1fe5f9246d9ed9a2000100074401c19095811200000014'.decode('hex').replace('\0\0\3', '\0\0'))
  assert 0, parse_h265_sps('01016000000300000300000300000300baa01e20287f97e491b67b64a2000100074401c190958112'.decode('hex').replace('\0\0\3', '\0\0'))
  https://gpac.github.io/mp4box.js/test/filereader.html
  https://github.com/AOMediaCodec/av1-avif/wiki
  https://github.com/m-hiki/isobmff
  https://github.com/gpac/mp4box.js/blob/master/src/parsing/irot.js
  'hev1'/'hvc1' are code points used to signal different packaging of the stream in the container mp4 file. -bsf:v hevc_mp4toannexb

  Parsing strategy of mif1:

  * Verify ftyp (=mif1 etc.).
  * Get the primary item index from meta/pitm. (Default to 0?)
  * Get item_type of the primary item from meta/iinf/infe. This will be the info['codec'].
  * Parse item properties in meta/iprp/ipco.
  * Get association_count for each item from meta/iprp/ipma.
  * From the association_count values figure out which item properties belong to the primary item.
  * Get item['width'] and item['height'] from the the ispe from the belonging meta/iprp/ipco range.

  @0+24: ftyp
     @8+16: (data) contains mif1 and heic
  @24+510: meta
    @32+4: (data)
    @36+33: hdlr HandlerRefererence
      @44+25: (data) contains pict
    @69+14: pitm PrimaryItem
      @77+6: (data)
        00000000
        03ea: primary_item_id=1002
    @83+52: iloc ItemLocation
      @91+44: (data)
        {'base_offset': 534, 'extents': [{'extent_length': 289408, 'extent_offset': 8}], 'item_id': 1002, 'data_reference_index': 0}
        {'base_offset': 534, 'extents': [{'extent_length': 3658, 'extent_offset': 289416}], 'item_id': 1005, 'data_reference_index': 0}
    @135+76: iinf ItemInformationBox
      @143+6: (data)
      @149+31: infe ItemInformationEntry
        @157+23: (data) contains item_type=hvc1 (for AV1, item_type=av01)
      @180+31: infe
        @188+23: (data) contains item_type=hvc1
    @211+26: iref
      @219+4: (data)
      @223+14: thmb
        @231+6: (data)
    @237+297: iprp ItemProperties
      @245+263: ipco ItemPropertyContainer
        @253+108: hvcC
          @261+100: (data) contains h265/sps
            010160000000000000000000baf000fcfdf8f800000f03a00001
            0018: nal_unit_length=24 byte_size=24+3 (because of 3x000003)
            40010c01ffff0160000003002000300000300000300baf024a10001...?
            001f: nal_unit_length=31
            420101016000000300000300000300000300baa002d0803c1fe5f9246d9ed9a20001
            0007: nal_unit_length=7
            4401c190958112: h265/sps, needs .replace('\0\0\3', '\0\0'), width=1440 height=960
        @361+20: ispe ItemSpatialExtents
          @369+12: (data)
            00000000
            000005a0: width=1440
            000003c0: height=960
        @381+107: hvcC
          @389+99: (data) contains h265/sps
            010160000000000000000000baf000fcfdf8f80000: HEVDecoderConfigurationRecord
            0f: length_size_minus_one=15 (16-bit nal_unit_length)
            03: array_count
            a0: array_completeness=1 nal_unit_type=0x20
            0001: nal_unit_count
            0018: nal_unit_length=24 +3??
            40010c01ffff016000000300000300000300000300baf024
            a1: array_completeness=1 nal_unit_type=0x21
            0001: nal_unit_count
            001e: nal_unit_length=30
            420101016000000300000300000300000300baa01e20287f97e491b67b64
            a2: array_complentess=1 nal_unit_type=0x22
            0001: nal_unit_count
            0007: nal_unit_length
            4401c190958112: h265/sps, needs .replace('\0\0\3', '\0\0'), width=240 height=160 thumbnail
        @488+20: ispe ItemSpatialExtents
          @496+12: (data)
             00000000
             000000f0: width=240
             000000a0: height=160
      @508+26: ipma ItemPropertyAssociation
        @516+18: (data)
          00: version=0
          000000: flags=0
          00000002: association_count=2
          03ea: item_id=1002
          02: association_count=2
          8102
          03ed: item_id=1005
          02: association_count=2
          8304
  @534+293074: mdat
* example vcodec=dirac
    42424344: parse_info_prefix='BBCD'
    00: parse_code=0(sequence_header)
    00000012: next_parse_offset=18  (next parse_info_prefix at 18)
    00000000: previous_parse_offset=0
    6c1c1a10c2d0: sequence_header bits
      011: version_major(uint)=2
      011: version_minor(uint)=2
      0000011: profile(uint)=8
      1: level(uint)=0
      0000011: base_video_format(uint)=8
      0: custom_dimensions_flag=0
      : width(uint)=720 (from base_video_format)
      : height(uint)=576 (from base_video_format)
      10000100001100001011100000:...
* example format=jpegxl-brunsli
  0a: tag=1(signature) type=2(bytes)
    04: size=4
    42d2d54e: signature='B\xd2\xd5N'
  12: tag=2(header) type=2(bytes)
    0a: size=10
    08: tag=1(width) type=0(int)
      8004: int_value=512: 4 * 128
    10: tag=2(height) type=0(int)
      8004: int_value=512: 4 * 128
    18: tag=3(version_comp) type=0(int)
      02: int_value=2: components=3 version=0
    20: tag=4(subsampling) type=0(int)
      11: int_value=17: 1,1,1,1,2,2
  22: tag=4(jpeg_internals) type=2(bytes)
* example format=fuif
  46554946: signature="FUIF"
  33: component_count=3
  2e: bpc=8
  8401: width=514
  7e: height=127
* example format=jpegxl
  ff0ab881a209: bits in reverse byte order:
    ?? 0010011010001 01 000 000110111 00 0 00001010 11111111:
      width=(0b0010011010001 + 1)=1234 width_u32_selector=1(13)
      ratio=0
      height=(0b000110111) + 1)==56 height_u32_selector=0(9)
      small=0 type=10 ff=255
* example format=jpegxl
  ff0af81f: bits in reverse byte order:
    ? 001 111111111 00 0 00001010 11111111:
      ratio=1 width=height=(0b111111111 + 1)==512 height_u32_selector=0(9)
      small=0 type=10 ff=255
* example format=jpegxl
  ff0a7f0?: bits in reverse byte order:
    ??????? 001 11111 1 00001010 11111111:
      ratio=1 width=height=((0b11111 + 1) * 8)==256
      small=1 type=10 ff=255
* example format=pik subformat=pik2 data=d74c4d0a45931b00 width=1234 height=56
  d74c4d0a: signature subformat=pik2
  45931b00: each byte in lsbfirst bit order:
    10 10001011001; width=1234 == 0b10011010001 + 1
    00 111011000; height=56 = 0b000110111 + 1
    00000000
* example format=pik subformat=pik2 data=d74c4d0afce73f0e width=512 height=512
  d74c4d0a: signature subformat=pik2
  fce73f0e: each byte in lsbfirst bit order:
    00 111111111; width=512 = 0b111111111 + 1
    00 111111111; height=512 = 0b111111111 + 1
    0001110000
* example format=pik subformat=pik1 data=50cc4b0a51319400 width=550 height=404
  http://libwebpjs.hohenlimburg.org/pik-in-javascript/
  http://libwebpjs.hohenlimburg.org/pik-in-javascript/images/2.pik
  50cc4b0a: signature subformat=pik1
  51319400: each byte in msbfirst bit order:
    01 01000100110; width=550 == 0b01000100110
    00 110010100; height=404 == 0b110010100
* example format=psp
  5061696e742053686f702050726f20496d6167652046696c650a1a0000000000: signature
  0500: major_version=5
  0000: minor_version=0
  7e424b00: header_identifier
  0000: block_identifier=0(PSP_IMAGE_BLOCK)
  2e000000: block_size=46
  2e000000: block_size_again=64
  f4010000: width=500
  b9010000: height=441
  0000000000005240: resolution_value
  01: resolution_metric=1(PSP_METRIC_INCH)
  0200: codec=2(lz77)
* example format=emf subformat=emf
  # https://example-files.online-convert.com/vector%20image/emf/example.emf
  01000000: type=1(EMR_HEADER)
  84000000: size=132, must be a multiple of 4, must be at least 88
  : Bounds RectL, in 0.01 millimeter uintes
    d8010000: left=472
    3f020000: top=575
    88110000: right=4488
    ac180000: bottom=6316
  : Frame RectL, in 0.01 millimeter uintes
    00000000: left=0
    00000000: top=0
    08520000: right=21000 (595.275590551181bp)
    04740000: bottom=29700 (841.889763779527bp)
  20454d46: ENHMETA_SIGNATURE
  00000100: version=0x10000 (typical)
  54ff8300: bytes
  51010000: records
  0400: handles=4
  0000: reserved=0
  0c000000: ndescription
  6c000000: offdescription
  00000000: npalentries
  : Device SizeL, size of reference device, in pixels
    60130000: width
    671b0000: height
  : Millimeters SizeL, size of reference device, in millimeters
    d2000000: width
    29010000: height
* example format=emf subformat=dual
  # https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-EMFPLUS/%5bMS-EMFPLUS%5d.pdf
  01000000: type=1(EMR_HEADER)
  6c000000: size=108, must be a multiple of 4, must be at least 88; includes the type= and size= fields as well
  : Bounds RectL, in 0.01 millimeter uintes
    ffffffff: left=-1
    ffffffff: top=-1
    64000000: right=
    6b000000: bottom=
  : Frame RectL, in 0.01 millimeter uintes
    00000000: left=0
    00000000: top=0
    f0070000: right=2032 (57.6bp)
    77080000: bottom=2167 (61.4267716535433bp)
  20454d46: ENHMETA_SIGNATURE
  00000100: version=0x10000 (typical)
  5c0a0000: bytes
  4c000000: records
  0200: handles=2
  0000: reserved=0
  00000000: ndescription=0
  00000000: offdesciption=0
  00000000: npalentries=0
  : Device SizeL, size of reference device, in pixels
    40060000: width
    b0040000: height
  : Millimeters SizeL, size of reference device, in millimeters
    40010000: width
    f0000000: height
  00000000: cbpixelformat=0
  00000000: offpixelformat=0
  00000000: bopengl=0
  00e20400: micrometersx (width of reference device in micrometers)
  80a90300: micrometersy (height of reference device in micrometers)
  46000000: type=0x46(EMR_COMMENT)
  2c000000: size=44
  20000000: data_size=32
  454d462b: EMR_COMMENT_EMFPLUS
  0140: type=0x4001(EmfPlusHeader)
  0100: flags=1(EMF+_dual)
  1c000000: size=28
  10000000: data_size=16
  0210c0db: EmfPlusGraphicsVersion=(0xdbc01 << 20)+2 (can be +1 or +2)
  01000000: EmfPlusFlags=1(reference_playback_device_context)
  66000000: LogicalDpiX
  6c000000: LogicalDpiY
* example format=vp9 codec=vp9
  (62730100: ivf frame_size=0x17362)
  (0000000000000000: ivf timestamp=0)
  824983420031f031f600: frame(0x17362), binary below
    10: frame_marker=2 (constant)
    00: profile=0 (little endian), can be 0,1,2,3
    (if profile==3, then an additional 0 bit is expected here)
    0: show_existing_frame=0
    0: frame_type=1 (keyframe)
    1: show_frame=1 (ignored for keyframe, but the good value is 1)
    0: error_resilient_mode=0 (ignored for keyframe)
    010010011000001101000010: frame_sync=0x498342
    : color_config
      (if profile>=2, then an additional any bit is present here)
      000: color_space=0(CS_UNKNOWN)
      : if color_space==7(CS_RGB)
        (if profile==1 or profile==3, then additional 0 bit is inserted here)
      : if color_space!=7(CS_RGB)
        ?: color_range=0 (can be anything)
        (if profile==1 or profile==3, then additional 3 bits: ??0 are inserted here)
    : frame_size
      0000001100011111: frame_width_minus_1=799
      0000001100011111: frame_height_minus_1=799
* bits of format=vp9 codec=vp9
  (legend: uuu: anything other than 111)
  one of:
    100000??010010011000001101000010 (uuu? or 111): profile=0
    101000??010010011000001101000010 (uuu???0 or 1110): profile=1
    100100??010010011000001101000010 (?uuu? or ?111): profile=2
    1011000??01001001100000110100001 (0?uuu???0 or 0?1110): profile=3
  wwwwwwwwwwwwwwww: 16-bit frame_width_minus_1
  hhhhhhhhhhhhhhhh: 16-bit frame_height_minus_1
* example format=av1 codec=av1 shortest, bits
  0: obu_forbidden_bit
  0010: obu_type=2(OBU_TEMPORAL_DELIMITER)
  0: obu_extension_flag
  1: obu_has_size_field=1 (must be 1 for low-overhead bitstream format; can be 0 for length-delimited bitstream format)
  0: obu_reserved_1bit=0 (must be 0)
  00000000: obu_size=0

  0: obu_forbidden_bit
  0001: obu_type=1(OBU_SEQUENCE_HEADER)
  0: obu_extension_flag
  1: obu_has_size_field
  0: obu_reserved_1bit
  00000100: size=4 (bytes)
  000: seq_profile=0
  1: still_picture=1
  1: reduced_still_picture_header=1
  ?????: seq_level_idx[0]
  0000: frame_width_bits_minus_1=0
  0000: frame_height_bits_minus_1=0
  0: max_frame_width_minus_1=0 width=1
  1: max_frame_height_minus_1=0 height=2
  0: use_128x128_superblock=0
  0: enable_filter_intra=0
  0: enable_intra_edge_filter=0
  0: enable_superres
  0: enable_cdef
  0: enable_restoration
  : color_config
    0: high_bitdepth
    1: mono_chrome
    0: color_description_present_flag
    0: color_range
    0: separate_uv_delta_q
  0: film_grain_params_present
* example format=av1 codec=av1 shortest, bits
  0: obu_forbidden_bit
  0010 obu_type=2(OBU_TEMPORAL_DELIMITER)
  0: obu_extension_flag
  1: obu_has_size_field=1 (must be 1 for low-overhead bitstream format; can be 0 for length-delimited bitstream format)
  0: obu_reserved_1bit=0 (must be 0)
  00000000: obu_size=0

  0: obu_forbidden_bit
  0001 obu_type=1(OBU_SEQUENCE_HEADER)
  0: obu_extension_flag
  1: obu_has_size_field
  0: obu_reserved_1bit
  00001011: size=11 (bytes)
  000: seq_profile=0
  0: still_picture=0
  0: reduced_still_picture_header=0 (must be 0 if still_picture=0)
  0: timing_info_present_flag
  0: initial_display_delay_present_flag
  00000: operating_points_cnt_minus_1
  000000000000: operating_point_idc
  00100: seq_level_idx=5
  1001: frame_width_bits_minus_1=9
  1001: frame_height_bits_minus_1=9
  1100011111: max_frame_width_minus_1=799 width=800
  1100011111: max_frame_height_minus_1=799 height=800
  0: frame_id_numbers_present_flag
  1: use_128x128_superblock
  1: enable_filter_intra
  1: enable_intra_edge_filter
  1: enable_interintra_compound
  1: enable_masked_compound
  1: enable_warped_motion
  1: enable_dual_filter
  1: enable_order_hint
  1: enable_jnt_comp
  1: enable_ref_frame_mvs
  1: seq_choose_screen_content_tools=1 seq_force_screen_content_tools=2(SELECT_SCREEN_CONTENT_TOOLS)
  1: seq_choose_integer_mv
  110: order_hint_bits_minus_1
  0: enable_superres
  1: enable_cdef
  1: enable_restoration
  0: high_bitdepth
  0: mono_chrome
  0: color_description_present_flag
  0: color_range
  0: separate_uv_delta_q
  0: film_grain_params_present
  00: some extra bits, maybe there is a mistake from frame_id_numbers_present_flag
  1: trailing_one_bit
  000: trailing_zero_bit*3

  0: obu_forbidden_bit
  0110 obu_type=6(OBU_FRAME)
  0: obu_extension_flag
  1: obu_has_size_field
  0: obu_reserved_1bit
  1010110100101010: obu_size=0b01010100101101=5421 (bytes)
  11000001010001000000000000111000101000100110000000000000000000001100000000000011000000000001000000000000000000000011000001000000000000100000000011000000000100000011000000010000010110101000000000111011...
* example format=rmmp
  @0: header
    52494646: file_signature='RIFF'
    96be0a00: data_size=704150==(file_size - 8)
    524d4d50: file_type='RMMP'
  @12: chunk
    63667463: chunk_type='cftc'
    14040000: chunk_size=1044 (this many bytes follow)
    00000000: sequence_id=0
  : cftc entry
    63667463: chunk_type='cftc'
    14040000: chunk_size=1044
    00000000: sequence_id=0
    0c000000: ofs=12
  : cftc entry
    76657220: chunk_type='ver '
    06000000: chunk_size=6
    27000000: sequence_id=39
    28040000: ofs=1064
  : cftc entry
    6d636e6d: chunk_type='mcnm'
    18000000: chunk_size=24
    00000000: sequence_id=0
    36040000: ofs=1078
  : cftc_entry
    76776366: chunk_type='vwcf'
    24000000: chunk_size=36
    00040000: sequence_id=1024
    56040000: ofs=1110
  : cftc_entry
    76776372: chunk_type='vwcr'
    3e040000: chunk_size=1086
    00040000: sequence_id=1024
    82040000: ofs=1154
  : cftc_entry
    64696220: chunk_type='dib '
    12810300: chunk_size=229650
    02040000: sequence_id=1016
    c8080000: ofs=2248
  : cftc_entry
    64696220: chunk_type='dib '
    b4090000: chunk_size=2484
    03040000: sequence_id=1016
    e2890300: ofs=231906
  ...
  @2248: chunk
    64696220: chunk_type='dib '
    12810300: chunk_size=229650
    02040000: sequence_id=1026
    0000: padding
    28000000: bmp_header_size=40
    80020000: width=640
    e0010000: height=480
    0100: planes=1
    0800: bitcount=8
    01000000: compression=1
    e4800300: data_size==(chunk_size + 46)
    ...
  @231906: chunk
    64696220: chunk_type='dib '
    b4090000: chunk_size=2484
    03040000: sequence_id=1027
    0000: padding
    28000000: bmp_header_size=40
    32010000: width=306
    96010000: height=406
    0100: planes=1
    0800: bitcount=8
    01000000: compression=1
    86090000: data_size==(chunk_size + 46)
    ...
* format=jpc
  ff4f: SOC marker
  ff51: SIZ marker
  0029: Lsiz=39+2 (39 bytes to follow, Lsiz==(38 + 3 * Csiz) )
  0000: Rsiz=0 (capabilities)
  0000013f: Xsiz=319 (width=(Xsiz - XOsiz))
  00000190: Ysiz=400 (height=(Ysiz - YOsiz))
  00000000: XOsiz=0
  00000000: YOsiz=0
  0000013f: XTsiz=319
  00000190: YTsiz=400
  00000000: XTOsiz=0
  00000000: YTOsiz=0
  0001: Csiz=1 (grayscale) (what is the point of >4 components? is it possible?; allow 1 <= Csiz <= 10)
  07: Ssiz[0]=7
  01: XRsiz[0]=1
  01: YRsiz[0]=1
* format=pict
  * info:
    DirectBits* is non-palette sampled image, PackBits* and Bits* are palette sampled image
    Which opcodes use RLE (packbits) compression? DirectBits* do, PackBits* do, Bits* (0x90) seems to do it as well, ImageMagic pict.c doesn't differentiate between Bits* and PackBits*.
    It doesn't define the PixMap structure.
    PICT can contain sampled images using the following opcodes:
    * 0x8200 CompressedQuickTime for 4-byte codec images
    * 0x8201 UncompressedQuickTime for 4-byte codec images
    * 0x90, 0x91, 0x98, 0x99, 0x9a, 0x9b: BitsRect, BitsRgn, PackBitsRect, PackBitsRgn, DirectBitsRect, DirectBitsRgn for uncompressed and RLE sampled images.

    ColorSpec => [
        value => 'int16u',
        rgb => 'RGBColor',
    ],
    ColorTable => [
        ctSeed => 'int32u',
        ctFlags => 'int16u',
        ctSize => 'int16u',
        ctTable => 'ColorSpec[$val{ctSize}+1]',
    ],
    BitMap => [
        # (no baseAddr)
        rowBytes => 'int16u',
        bounds => 'Rect',
    ],
    PixMap => [
        # Note: does not contain baseAddr
        # (except for DirectBits opcodes in which it is loaded separately)
        rowBytes => 'int16u',
        bounds => 'Rect',
        pmVersion => 'int16u',
        packType => 'int16u',
        packSize => 'int32u',
        hRes => 'fixed32s',
        vRes => 'fixed32s',
        pixelType => 'int16u',
        pixelSize => 'int16u',
        cmpCount => 'int16u',
        cmpSize => 'int16u',
        planeBytes => 'int32u',
        pmTable => 'int32u',
        pmReserved => 'int32u',
    ],
    # BitsRect data for PICT version 1
    BitsRect1 => [
        bitMap => 'BitMap',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        dataSize => 'int16u',
        bitData => 'binary[$val{dataSize}]',
    ],
    # BitsRgn data for PICT version 1
    BitsRgn1 => [
        bitMap => 'BitMap',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        maskRgn => 'Rgn',
        dataSize => 'int16u',
        bitData => 'binary[$val{dataSize}]',
    ],
    # BitsRect data for PICT version 2
    BitsRect2 => [
        pixMap => 'PixMap',
        colorTable => 'ColorTable',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        pixData => \ 'GetPixData($val{pixMap}, $raf)',
    ],
    # BitsRgn data for PICT version 2
    BitsRgn2 => [
        pixMap => 'PixMap',
        colorTable => 'ColorTable',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        maskRgn => 'Rgn',
        pixData => \ 'GetPixData($val{pixMap}, $raf)',
    ],
    DirectBitsRect => [
        baseAddr => 'int32u',
        pixMap => 'PixMap',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        pixData => \ 'GetPixData($val{pixMap}, $raf)',
    ],
    DirectBitsRgn => [
        baseAddr => 'int32u',
        pixMap => 'PixMap',
        srcRect => 'Rect',
        dstRect => 'Rect',
        mode => 'int16u',
        maskRgn => 'Rgn',
        pixData => \ 'GetPixData($val{pixMap}, $raf)',
    ],

    # http://developer.apple.com/documentation/QuickTime/INMAC/QT/iqImageCompMgr.a.htm
    CompressedQuickTime => [
        size => 'int32u',   # size NOT including size word
        version => 'int16u',
        matrix => 'int32u[9]',
        matteSize => 'int32u',
        matteRect => 'Rect',
        mode => 'int16u',
        srcRect => 'Rect',
        accuracy => 'int32u',
        maskSize => 'int32u',
        matteDescr => 'Int32uData[$val{matteSize} ? 1 : 0]',
        matteData => 'int8u[$val{matteSize}]',
        maskRgn => 'int8u[$val{maskSize}]',
        imageDescr => 'ImageDescription',
        # size should be $val{imageDescr}->{dataSize}, but this is unreliable
        imageData => q{binary[$val{size} - 68 - $val{maskSize} - $val{imageDescr}->{size} -
                    ($val{matteSize} ? $val{mattSize} + $val{matteDescr}->{size} : 0)]
        },
    ],

    # http://developer.apple.com/documentation/QuickTime/INMAC/QT/iqImageCompMgr.a.htm
    UncompressedQuickTime => [
        size => 'int32u',   # size NOT including size word
        version => 'int16u',
        matrix => 'int32u[9]',
        matteSize => 'int32u',
        matteRect => 'Rect',
        matteDescr => 'Int32uData[$val{matteSize} ? 1 : 0]',
        matteData => 'binary[$val{matteSize}]',
        subOpcodeData => q{
            binary[ $val{size} - 50 -
                    ($val{matteSize} ? $val{mattSize} + $val{matteDescr}->{size} : 0)]
        },
    ],

    # http://developer.apple.com/documentation/QuickTime/APIREF/imagedescription.htm
    # https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFAppenA/QTFFAppenA.html
    ImageDescription => [
        size => 'int32u',   # size INCLUDING size word, typically 86 bytes.
        cType => 'string[4]',  # Compression identifier, e.g. 'jpeg', codec
        res1 => 'int32u',
        res2 => 'int16u',
        dataRefIndex => 'int16u',
        version => 'int16u',
        revision => 'int16u',
        vendor => 'string[4]',
        temporalQuality => 'int32u',
        quality => 'int32u',
        width => 'int16u',
        height => 'int16u',
        hRes => 'fixed32u',
        vRes => 'fixed32u',
        dataSize => 'int32u',
        frameCount => 'int16u',
        nameLen => 'int8u',
        compressor => 'string[31]', e.g. '\x0cPhoto - JPEG\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
        depth => 'int16u',
        clutID => 'int16u',  # Color lookup table ID, -1==none.
        clutData => 'binary[$val{size}-86]',  # Usually empty.
    ],

    HeaderOp:
    $"FFFF FFFF" /* version; always -1 (long) for version 2 */
    $"0002 0000 0002 0000 00AA 0000 006E 0000" /* fixed-point bounding rectangle for picture */
    $"0000 0000" /* reserved */

    $"001E" /* v2 DefHilite opcode to use default hilite color */

  00 * 512: zero header
  0357: picSize=855 (to be ignored for version 2)
  : pic_frame (bounding box at 72 DPI)
    0000: top=0
    0000: left=0
    0200: bottom=512
    0300: right=768
  0011: opcode=VersionOp
    02ff: version; version=1 systems would read NOP+VersionOp(version=2)+OpEndPic
  0c00: opcode=HeaderOp
    fffe: version=-2 (extended version 2)
    00000048: resolution_x=72
    00000048: resolution_y=72
    0000: ?
    : bounding_box
      0000: top=0
      0000: left=0
      0200: bottom=512
      0300: right=768
    00000000: ?
  0001: opcode=Clip
    000a: Clip size=10
    : clip_rect
      0000: top=0
      0000: left=0
      0200: bottom=512
      0300: right=768
  00a0: opcode=ShortComment
    00de: kind=222
  00a1: opcode=LongComment
    00dc: kind=220
    01d4: size=468
    000001d46170706c00000100524742206d6e74726170706c000002970000000000000002000001ba000001d4000000000000000079a98000b27600000000000034c91b3802792dc55b8b0f42171a093e79aa000000000000000000000000000000000000000000360036003600000000000000000000000001ce02850360045d057f06c5083209c50b800d620f6d11a214001688193b1c191f22225825ba294a2d0730f1350a39513dc7426d47424c47517c56e25c786240683a6e6574c27b52821489099032978d9f1da6e0aed8b704bf65c7fad0c5d9c5e2fbec67f608ffe0ffff000001ce02850360045d057f06c5083209c50b800d620f6d11a214001688193b1c191f22225825ba294a2d0730f1350a39513dc7426d47424c47517c56e25c786240683a6e6574c27b52821489099032978d9f1da6e0aed8b704bf65c7fad0c5d9c5e2fbec67f608ffe0ffff000001ce02850360045d057f06c5083209c50b800d620f6d11a214001688193b1c191f22225825ba294a2d0730f1350a39513dc7426d47424c47517c56e25c786240683a6e6574c27b52821489099032978d9f1da6e0aed8b704bf65c7fad0c5d9c5e2fbec67f608ffe0ffff00001650686f746f2059434320524742205374616e6461726400: comment data
  8200: opcode=CompressedQuicktime
    000c009a: size=786586
    0000: version=0
    000100000000000000000000000000000001000000000000000000000000000040000000: matrix of 9 u32s
    00000000: matte_size=0
    0000000000000000: matte_rect
    0040: transfer_mode=0x40=0(srcCopy)+64(ditherCopy)
    0000000002000300: src_rect
    00000300: accuracy=0x300
    00000000: mask_size=0
    : matte_data=''
    : mask_data=''
    00000056: ImageDescription_size=86
    6b706364: codec_tag='kpcd'
    00000000: res1
    0000: res2
    0000: data_ref_index
    0000: version
    0000: revision
    00000000: vendor='\0\0\0\0' (could be ='appl')
    00000000: temporal_quality=0
    00000300: quality=0x300
    0300: width=768
    0200: height=512
    00480000: x_resolution=72 dpi (72 << 16)
    00480000: y_resolution=72 dpi (72 << 16)
    000c0000: image_size=786432 (correct here, but unreliable in general)
    0001: unknown data of size 2
    08: format_desc_size=8
    50686f746f204344: format_desc='Photo CD'
    0000000000000000000000000000000000000000000000: format_desc_padding: start(@format_desc_size) + 32 == end(@format_desc_padding)
    0020: bits_per_pixel=32
    ffff: id_padding: start(@id_size) + id_size == end(@id_padding)
    ff * 32: photocd_header
    ...: photocd_data: start(@photocd_header) + image_size == end(@photcd_data)
  0007: opcode=PnSize
    00ae: pen_height
    006e: pen_width
  0007: opcode=PnSize
    0001: pen_height
    0001: pen_width
  0003: opcode=TxFont
    0000: text_font=0
  0004: opcode=TxFace
    00: text_face=0
  00: word padding before next opcode
  000d: opcode=TxSize
    000c: text_size=14
  0028: opcode=LongText
    0028: x
    0023: y
    10: text_size=16
    517569636b54696d65aa20616e642061: text='QuickTime\xaa and a'
  00: word padding before next opcode
  0028: opcode=LongText
    0040: x
    0014: y
    15: text_size=21
    50686f746f204344204465636f6d70726573736f72: text='Photo CD Decompressor'
  0028: opcode=LongText
    0058: x
    0002: y
    1e: text_size=30
    617265206e656564656420746f2075736520746869732070696374757265: text='are needed to use this picture'
  00: word padding before next opcode
  0000: opcode=NOP
  00a0: opcode=ShortComment
    00dd: kid=221
  00ff: opcode=OpEndPic
* format=pict
  00 * 512: zero header
  0200: pic_size=512
  : pic_frame
    0000: top=0
    0000: left=0
    0078: bottom=120
    00a0: right=160
  0011: opcode=VersionOp
    02ff: version; version=1 systems would read NOP+VersionOp(version=2)+OpEndPic
  0c00: opcode=HeaderOp
    fffe: version=-2 (extended version 2)
    00000048: resolution_x=72
    00000048: resolution_y=72
    0000: ??
    : bounding_box
      0000: top=0
      0000: left=0
      0078: bottom=120
      00a0: right=160
    00000000: ??
  0001: opcode=Clip
    000a: Clip size=10
    : clip_rect
      0000: top=0
      0000: left=0
      0078: bottom=120
      00a0: right=160
  8200: opcode=CompressedQuicktime
    00001582: size=5506
    0000: version
    000100000000000000000000000000000001000000000000000000000000000040000000: matrix (36 bytes)
    00000000: matte_size=0
    0000000000000000: matte_rect
    0040: transfer_mode=0x40=0(srcCopy)+64(ditherCopy)
    00000000007800a0: src_rect
    00000300: accuracy=0x300
    00000000: mask_size=0
    : matte_data=''
    : mask_data=''
    00000056: ImageDescription_size=86
    6a706567: codec_tag='jpeg'
    00000000: res1
    0000: res2
    0000: data_ref_index
    0001: version
    0001: revision
    6170706c: vendor='appl'
    00000000: temporal_quality=0
    00000300: quality=0x300
    00a0: width=160
    0078: height=120
    00480000: resolution_x=(72 << 16)
    00480000: resolution_y=(72 << 16)
    000087ac: data_size=34732 (unreliable, incorrect)
    0001: frame_count=1
    0b: format_desc_size=11
    466f746f202d204a504547: format_desc='Foto - JPEG'
    0000000000000000000000000000000000000000: format_desc_padding
    0018: depth=24
    ffff: clut_id=-1
    : clut_data='' (empty)
    ffd8: JPEG SOI marker, image starts here
    ffe000104a46494600010100004800480000ffdb004300030202020202030202020303030304060404040404080606050609080a0a090809090a0c0f0c0a0b0e0b09090d110d0e0f101011100a0c12131210130f101010ffdb00430103030304030408040408100b090b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010ffc0001108007800a003012200021101031101ffc4001b0001010100030101000000000000000000000908040607050affc4003c1000010401040200040206060b000000000200010304050607111208130914212216231517193132d41824565795a5343738525373768593b4b5ffc4001c0101000105010100000000000000000000000403050607080201ffc400331100020102040208040603000000000000000102031104050621314107123251617191b11322528114424362a1d1167292ffda000c03010002110311003f00e7fecbadff00fed7edf7f885dfe516f3f1936bb506cbec7e9bdb4d53731f6b2987f9cf7cb8f90ce02f6dc9a61ea46004fc0ca2cfc8b7d59ff7b7d5fd451528518d377465f9feb7cdb52e1a384c7b8b829292b46dba4d7b3611115531008888022ccbbf7e7c6d1ecc642f695c2c16358ea9c7cc55ecd0a327a6ad4944a3ef1cf6885d989848fe910caec71101fadff74fcddcf30b7f378e79a3ceeb5b187c4cf0c95cb0d8239295228a48c4258e4612739c4d85ddda63919bb9b0f5127154275e30db8b36169de8d739cfa2abce3f0693dd4a7c5afdb1e2fcdd935c1b2ae6bef20764f6bfe7e2d73b9fa7f196f19eaf9ac7fce0cd7e3f675e9fd522ed3bf2d2017d01f817ecff006f2ebcfbfa7cf899fdebff009164ff009751ed15078a97246ccc3743194c69db1388a92977c7ab15e8e32f7fecb09fd3e7c4cfef5ffc8b27fcbaee3a1bca0f1f371fd21a4f76b4fcd62cdc1c7d7a972c7c8db9e72ebd423af65a3964ece62c2e22ec45c8b3bbb3b344a4458a97347aafd0ce4f283542bd552ef6e2d7a28c7dcfd0322895b4fe4cef66cbd9a5f82b5de41b174b911c2dd94ace34a3299a5901ab9bf58fb933f638ba49f79f062e4eefbcf633e243b67aebe5301bb14ff056724f5c3f3bd9e5c55891fd41cfb3f8eb763390b8919e38c039299dd57862212d9ec6b8d41d17e739327570ebe3d35ce2be65e70ddffcb91b091115735b044440111100444401111005393cccf3bb2199c84db61b09a96c52c652999b27a9b1b60a396eca05cfa6a4a0ece300937dd28bf32bb702feae5e6ed1f114f293f4556b3e3c685bf90ad9497d47a9ee44fea06a9243dc68b3b8f63f60c919c840e23d388ddcda49402762875eb7e489be7a35d014e74e19de690bdf7a706b6b729b5ceff9570b7cdbdd58888a19bdc22220088880222203597883e6eea0da0cb57d11ba797c8663425af5578a698cec4f82ea2318142cfc9156611162807f859bb46dd98825a998ec8e3f2f8fab96c4deaf768dd842c56b35e519229e231620900c5dd88485d9d9d9f876767650056d3f87b7949f8135045b1fae6fe427c1ea2b90c1a764e7db1e36fca6ecf0f5617368e7330fab3f5091bb38b34b24832a856b3eac8d2fd24680a78ba53ce32b85aa455e704bb4b9c92fa92ddfd4bf776a99a2229c73b8444401111005d3b78372f13b3db67a8b72b3517babe0a9bcc107621f989c9d82083b089b87b2538c3bf5761efd9fe8cebb8ac09f14fdc88031fa33686a4b5ce696693525f02864f6c422275eab89fd01c4dcee761fa973103fdacff778a93ea45c8c8f49e4bfe419c50c04afd593bcadf4ade5bf2ba564fbda302ea2cfe5b55ea0c9ea9cfdbf9aca662e4d90bb3fac43db3ca6e721f506611e489df816666e7e8cccbe7222b51d9708469c5420ac970411110f411110044440111100444405a5f13b7abf5efb2785d61766f66729f389cefdbc737e111ef27d2300fcd028e6ea0dd43ddd3977175ec2a61fc30f7220d37bb99cdb9bb2d78a1d658d196b3943214b25da5de408c487ed017824b664e6df578c19899fed2a78ae7467d782671febbc8a3a7f3cad86a4ad4e5f3c3fd65c97845de2bc82222aa61e111100522fe2199fcb663ca6d498ec95bf757c153c763f1e1eb11f4c05523b0e1cb33397e6d898b92e5fefe39e1999aba28f7e7cff00b59ebaff00b67ff32aa8d8aec7dcdb1d0e4232cfaab6b85295bc3e782f66d19f5111403a602222008888022220088880222203d47c5ccfe5b4d7919b6f91c2dbf96b136a4a38f33f589f305a946bce1c133b7dd14b20f3fbdbb72cececced6d543af1e3fd7fed9ff00d6186ffdd895c553b0bd9673b74d108acc70d34b7707bf94b6f77ea11114a34c0444401483f88163b214bcadd5f66e51b104390871b62a492c44236226a1046f246eedc18b491c81cb72dd809bf7b3b2af8a7a7c53f6de70c868cddea91583865864d377cca68fd511091d8aac21f4372363b9d8bea3c440df6bbfdd1f12af0365f44f8f860b51469cff00561282f3da4bd7ab6fb98111115bcea50888802222008888022220088880f49f1ab1d90ca790bb6b5b1946c5b9835562ec1470445210c5159092591d859dd842303327fdc2224efc333bab7aa59fc3436de7d51be76f5fcd1586a3a271b24a334534623f3b6c4a08a3900b9321285ed9723c70518f24dcb0954c53f0aad0b9cd3d30e3e188cea9e161fa7057f3936ede9d57f70888a49a94222200bcdbc88d9dc7efaed1e7b6f6c8d70bd661f98c4d999859aae423fba093bb81b80b97e59b80f678a4945bf897a4a2f8d26acc9183c5d5c0e2218aa0ed383524fc53ba200e471d90c4642d6272d46c52bd4a63af66b5888a39609409c4e330266712126767676e59d9d9d71d6e3f88a78c1f8632d67c84d1edce2f377228b3d8f8aa756a56cc786b6cf18f568e5216691e4e0bdf233f6379b80c38ad738384accecdd3b9e61f5165d4f1f877da5bafa65ce3f67eaacf984445e0bd844440111100444401116a2f057c60fd786b62d6faa5ba690d2172bcb3c32d4f6065adb3fb06a7262f1146cc22f333f25d2401eadedee1ea31737645b338cdb0d91e0aa63f16ed082f57c125e2dedefb1b8bc22d8cfd49ec9d0fd318ef97d4faa7ae6331ec87a4d0f71fc8aa5da30907d51bb768cfb749a49f87e09682445748c545591c639a6635b37c6d5c7621de736dbfe97825b2f0411117a20044440111101c7c8e3b1f97c7dac4e5a8d7bb46ec275ecd6b110c914f118b89c6604cec4242eececedc3b3bb3a957e66786790d8cc84db81b7f5ac5ddbfbb333183b9492e0e532e061949f9728089d9a395febcbb466fdba1cb571153a94d54566653a53566374a62fe3e1fe684bb506eca4bf9b35c9db6f1574ff3f28a95efdfc3574ceb0c85ed55b2b9dafa632372629e4c25e8dff45b91147cb40518b9d5166f69f4eb28bb9080b440cdc605dcbd9fdccd9ecb061772b46e4305626e7d0730b1c16381022f4ce0e514bd5a40edd08bab9705c3fd15be74a54f89d3fa7b58e53a960bf07552a96de12da4bbf6e6977c6ebc4e9c888a999404444011761d0db7dadb7335043a5b40e98c8677293757f45385cfd60e621ec90bf8628d88c18a437101ecdd9d996e2d8cf863ff00a26a2dfcd43ff0e6fc3b8797fe51faecdaff00cb19842dfee904ebdc29caa70463b9eeaacab4e43ad8faa94b9456f27e497bbb2f133b78a5e296a6f243533d8b056315a2b15308e5f2e22dd8cb862f95add99d8a72176777767188498899ddc024ae7a3f47e99d01a671da3746e1abe2b0d8a85a0a952067eb18f2eeeeeefcb91113b91193b91111113bbbbbbfd1c763b1f88c7d5c4e268d7a54694215eb56af10c7141100b0846002ccc2222ccccccdc3333332e42b852a4a9af1398f586b3c66adc429545d4a31ecc2f7b78b7b5e4fbedb2d9736c888aa986844440111100444401111005c7c8e3b1f97c7dac4e5a8d7bb46ec275ecd6b110c914f118b89c6604cec4242eececedc3b3bb3a221f5371775c4f05d7de0878cdaf7e7ecfe03fc3b90bdeafeb980b274fd1d3ab7e557fbaa8f610ea5f92fcf622fe37ecbcfff0065d6c07f6bf707fc4297f2888a9ba507c8c970dacb3fc253f854b1753aabbe4ddbc15ef65e1c07ecbad80fed7ee0ff008852fe51770d0df0f8f19b45fa66bba5f21aa6dd7b83722b39dc81c9d7af57188a187d50491f22eee32465dbb131390f02c4454a0b91f6beb4d438883a73c654b3ee95bf9566681c069dd3fa531306034b60b1f87c5d5ede8a58faa15e08bb1399758c19847922227e1beaeeeffbdd7d144550c6a73954939cdddbe2c22221e422220088880ff: JPEG image data
    ffd9: JPEG trailer
    009a: opcode=DirectBitsRect; This is a full-zero preview image with packbits
      000000ff828000000000007800a000000004000000000048000000480000001000200003000800000000000000000000000000000000007800a000000000007800a00040: DirectBitsRect header
      000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100000a81008100810081008100: image data
    00ff: opcode=OpEndPic
  009a: opcode=DirectBitsRect (Is it a bug in ImageMagick export?) (Does DirectBits mean no palette?)
    000000ff: (baseAddr) fake size + fake OpEndPic
    8280: version=0x8280 (or row_bytes?)
    : bounds, used for (RLE) compression
      0000: top=0
      0000: left=0
      0078: bottom=120
      00a0: right=160
    0000: pack_type=0 (0, 1, 2, 3 or 4)
    00040000: pack_size=262144
    00000048: resolution_x=72
    00000048: resolution_y=72
    0000: pixel_type=0
    0010: pixel_size1=16
    0020: pixel_size2=32 (why?)
    0003: colormap_count=3
    0008: colormap_size=8
    00000000: plane_bytes=0
    00000000: pm_table=0
    00000000: pm_reserved=0
    : src_rect
      0000: top=0
      0000: left=0
      0078: bottom=120
      00a0: right=160
    : dst_rect
      0000: top=0
      0000: left=0
      0078: bottom=120
      00a0: right=160
    0040: transfer_mode=0x40=0(srcCopy)+64(ditherCopy)
    : Is this a bug in picttoppm.c? There shouldn't be a region now, and it expects one.
    000a: line_size=10 (for packbits == codec=rle); why is it so small? is this a tile?
    8100: repeat 129 times 0 (packbits compression, http://fileformats.archiveteam.org/wiki/PackBits)
    8100: repeat 129 times 0
    8100: repeat 129 times 0
    8100: repeat 129 times 0
    8100: repeat 129 times 0
    : So far, line 0 has 161.25*pixel_size2 bytes, so it fits the width=160.
    000a...: There will be 120 full-zero lines in total.
    : no size indicator of DirectBitsRect content
  00ff: opcode=OpEndPic
  009a: opcode=DirectBitsRect; Is the presence of a new op after opcode=OpEndPic a bug in ImageMagick export?
  ...: The same image is repeated again. Is this a bug in ImageMagick export?
  00ff: opcode=OpEndPic
* format=jpegxr subformat=coded
  574d50484f544f00: signature='WMPHOTO\0'
  11: flags0
  45: flags1
  c0: flags2 short_header_flag=1 ...
  71: flags3 output_clr_fmt=7 output_bitdepth=1
  009f: width=(0x9f+1)=160
  0077: height=(0x77+1)=120
* format=micropython-mpy
  'M\0' + chr(flags & 3) + chr(sib) + varint(data_size) + ...
  'M\1' + chr(flags & 3) + chr(sib) + varint(data_size) + ...
  'M\2' + chr(flags & 3) + chr(sib) + varint(data_size) + ...
  'M\3' + chr(flags & 3) + chr(sib) + varint(data_size) + ...
  'M\4' + chr(flags & 3 | arch << 2) + chr(sib) + varint(qws) + varint(kind & 3) | data_size << 2) + ...
  'M\5' + chr(flags & 3 | arch << 2) + chr(sib) + varint(qws) + varint(kind & 3) | data_size << 2) + ...

  arch: we will accept anything <= 31; in version=5:
      MP_NATIVE_ARCH_NONE = 0,
      MP_NATIVE_ARCH_X86 = 1,
      MP_NATIVE_ARCH_X64 = 2,
      MP_NATIVE_ARCH_ARMV6 = 3,
      MP_NATIVE_ARCH_ARMV6M = 4,
      MP_NATIVE_ARCH_ARMV7M = 5,
      MP_NATIVE_ARCH_ARMV7EM = 6,
      MP_NATIVE_ARCH_ARMV7EMSP = 7,
      MP_NATIVE_ARCH_ARMV7EMDP = 8,
      MP_NATIVE_ARCH_XTENSA = 9,
      MP_NATIVE_ARCH_XTENSAWIN = 10,
  sib: small_int_bits, typically 31; values: 30, 31, 47, 62, 63
  qws: qstr_window_size, typically 32
  kind: e.g. MP_CODE_BYTECODE, MP_CODE_NATIVE_PY, MP_CODE_NATIVE_VIPER

  #include <stdio.h>
  #define MICROPY_OBJ_REPR_A 'A'
  #define MICROPY_OBJ_REPR_B 'B'
  #define MICROPY_OBJ_REPR_D 'D'
  #define MP_SMALL_INT_MIN ((MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A) ? ((mp_int_t)(((mp_int_t)(((mp_uint_t)1) << ((sizeof(mp_uint_t)) * 8 - 1))) >> 1)) : (MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_B) ? ((mp_int_t)(((mp_int_t)(((mp_uint_t)1) << ((sizeof(mp_uint_t)) * 8 - 1))) >> 2)) : ((mp_int_t)(((mp_int_t)0xffff800000000000) >> 1)))
  #define MP_SMALL_INT_MAX ((mp_int_t)(~(MP_SMALL_INT_MIN)))
  #define mp_small_int_bits() ({ mp_int_t i = MP_SMALL_INT_MAX; int n = 1; while (i != 0) { /* printf("(%lld)\n", (long long)i); */ i >>= 1; ++n; } n; })
  int main(int argc, char **argv) {
    (void)argc; (void)argv;
  #define MICROPY_OBJ_REPR MICROPY_OBJ_REPR_D
  #define mp_int_t long long
  #define mp_uint_t unsigned long long
    printf("%d\n", mp_small_int_bits());
  #define MICROPY_OBJ_REPR MICROPY_OBJ_REPR_A
  #define mp_int_t long long
  #define mp_uint_t unsigned long long
    printf("%d\n", mp_small_int_bits());
  #define MICROPY_OBJ_REPR MICROPY_OBJ_REPR_B
  #define mp_int_t long long
  #define mp_uint_t unsigned long long
    printf("%d\n", mp_small_int_bits());
  #define MICROPY_OBJ_REPR MICROPY_OBJ_REPR_A
  #define mp_int_t int
  #define mp_uint_t unsigned int
    printf("%d\n", mp_small_int_bits());
  #define MICROPY_OBJ_REPR MICROPY_OBJ_REPR_B
  #define mp_int_t int
  #define mp_uint_t unsigned int
    printf("%d\n", mp_small_int_bits());
    return 0;
  }
* format=saltpack-binary
  c5: bin16 header
    05b5: bin16 size=0x5b5=1461
    96: fixarray size=6
      a8: fixstr size=8
        73616c747061636b: 'saltpack' format_name
      92: fixarray size=2
        02: fixint value=2 major_version (can be 1 or 2)
        00: fixing value=0 minor_version
      03: fixint value=3 mode https://saltpack.org/signcryption-format
      c4: bin8
        20: bin8 size=32 ephemeral_public_key
        ????????????????????????????????????????????????????????????????
      c4: bin8
        30: bin8 size=48 sender_secretbox
        ????????????????????????????????????????????????????????????????????????????????????????????????
      dc: array16
        0010: array16 size=16 recipients_list
        92: fixarray size=2
          c4: bin8
            20: bin8 size=32 recipient_identifier
            ????????????????????????????????????????????????????????????????
          c4: bin8
            30: bin8 size=48 payload_key_box
            ????????????????????????????????????????????????????????????????????????????????????????????????
        92: fixarray size=2
          c4: bin8
            20: bin8 size=32 recipient_identifier
            ????????????????????????????????????????????????????????????????
          c4: bin8
            30: bin8 size=48 payload_key_box
            ????????????????????????????????????????????????????????????????????????????????????????????????
        ...
      ...
    ...
  ...

__END__
